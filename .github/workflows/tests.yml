name: Run tests (pytest)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  pytest:
    name: Run tests (pytest matrix with Postgres)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10, 3.11]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d testdb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5432/testdb

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U postgres -d testdb && break || sleep 2
          done

      - name: Run alembic migrations
        run: |
          alembic upgrade head

      - name: Show Alembic current
        run: |
          alembic current

      - name: Seed sample data with CLI
        if: github.ref == 'refs/heads/main'
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: |
          # try up to 3 attempts; propagate non-zero exit on final attempt
          for i in 1 2 3; do
            echo "Seeding attempt $i..."
            python -m src.cli seed-db --csv scripts/sample_candles.csv && break
            if [ $i -lt 3 ]; then
              echo "Retrying in 5s..."
              sleep 5
            else
              echo "❌ All seed attempts failed"
              exit 1
            fi
          done

      - name: Verify seeded symbols
        if: github.ref == 'refs/heads/main'
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: |
          echo "=== alembic current ==="
          alembic current
          echo "=== symbol list ==="
          python -m src.cli list-symbols

      - name: Check symbol count
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: |
          count=$(python -m src.cli list-symbols | wc -l)
          echo "Seeded symbols: $count"
          if [ "$count" -eq 0 ]; then
            echo "❌ No symbols seeded!"
            exit 1
          fi

      - name: Check symbols count with psql
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: |
          echo "Installing psql client..."
          sudo apt-get update -y && sudo apt-get install -y postgresql-client
          echo "Checking symbols count directly in DB..."
          psql "$DATABASE_URL" -c "SELECT COUNT(*) FROM symbols;"
          count=$(psql -t -A "$DATABASE_URL" -c "SELECT COUNT(*) FROM symbols;")
          echo "Symbols count: $count"
          if [ "$count" -eq 0 ]; then
            echo "❌ No symbols found in DB!"
            exit 1
          fi

      - name: Run pytest
        run: |
          pytest -q --maxfail=1 --disable-warnings -v
        env:
          PYTHONUNBUFFERED: '1'

