
import pandas as pd
import sqlite3
import os
from datetime import datetime

# === CONFIG TH·ª∞C T·∫æ CHO FLOKIUSDT 30M ===
# File tradelist th·ª±c t·∫ø (KH√îNG c√≥ ƒë∆∞·ªùng d·∫´n, ch·ªâ t√™n file trong th∆∞ m·ª•c hi·ªán t·∫°i)
TRADELIST_FILE = 'TaoQuan_Strategy_Tester_BINANCE_1000FLOKIUSDT.P_2025-09-22.csv'  # ƒê·ªïi ƒë√∫ng t√™n file tradelist b·∫°n ƒëang d√πng

# N·∫øu d√πng database candle:
CANDLE_DB = 'candlestick_data.db'  # ƒê√∫ng t√™n file DB trong workspace
CANDLE_SYMBOL = 'FLOKIUSDT'      # ƒê√∫ng symbol trong DB (ch√∫ √Ω: c√≥ th·ªÉ l√† 'BINANCE_FLOKIUSDT' ho·∫∑c 'BINANCE_1000FLOKIUSDT.P')
CANDLE_TIMEFRAME = '30m'                        # ƒê√∫ng timeframe trong DB (chu·ªói, v√≠ d·ª• '30' ho·∫∑c '30m')


# === ƒê·ªçc tradelist ===
def load_tradelist(tradelist_file):
    try:
        df = pd.read_csv(tradelist_file)
        # ∆Øu ti√™n c√°c c·ªôt th·ªùi gian ph·ªï bi·∫øn
        for col in ['entry_time', 'date_time', 'open_time', 'time', 'Date/Time']:
            if col in df.columns:
                df['entry_time'] = df[col]
                break
        else:
            # N·∫øu kh√¥ng c√≥ c·ªôt th·ªùi gian ph·ªï bi·∫øn, b√°o l·ªói r√µ r√†ng
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y c·ªôt th·ªùi gian entry! C√°c c·ªôt c√≥ trong file: {list(df.columns)}")
            raise Exception('Kh√¥ng t√¨m th·∫•y c·ªôt th·ªùi gian entry trong tradelist!')
        return df
    except Exception as e:
        print(f'‚ùå L·ªói ƒë·ªçc tradelist: {e}')
        return None

# === ƒê·ªçc candle t·ª´ file CSV ===
def load_candle_csv(candle_file):
    try:
        df = pd.read_csv(candle_file)
        for col in ['open_time', 'time', 'date_time']:
            if col in df.columns:
                df['candle_time'] = df[col]
                break
        else:
            raise Exception('Kh√¥ng t√¨m th·∫•y c·ªôt th·ªùi gian trong file candle!')
        return df
    except Exception as e:
        print(f'‚ùå L·ªói ƒë·ªçc file candle CSV: {e}')
        return None

# === ƒê·ªçc candle t·ª´ database ===
def load_candle_db(db_file, symbol, timeframe):
    try:
        conn = sqlite3.connect(db_file)
        query = "SELECT * FROM candlestick_data WHERE symbol = ? AND timeframe = ?"
        df = pd.read_sql_query(query, conn, params=[symbol, timeframe])
        conn.close()
        if 'open_time' in df.columns:
            df['candle_time'] = df['open_time']
        elif 'time' in df.columns:
            df['candle_time'] = df['time']
        else:
            raise Exception('Kh√¥ng t√¨m th·∫•y c·ªôt th·ªùi gian trong b·∫£ng candle!')
        return df
    except Exception as e:
        print(f'‚ùå L·ªói ƒë·ªçc candle t·ª´ database: {e}')
        return None

# === So kh·ªõp t·ª´ng trade v·ªõi candle ===
def check_trades_vs_candles(trade_df, candle_df):
    print(f'üîç T·ªïng s·ªë trade: {len(trade_df)}')
    print(f'üîç T·ªïng s·ªë n·∫øn: {len(candle_df)}')
    # Chu·∫©n h√≥a candle time v·ªÅ int timestamp
    candle_times = []
    for candle_time in candle_df['candle_time']:
        try:
            if isinstance(candle_time, str) and candle_time.isdigit():
                candle_times.append(int(candle_time))
            elif isinstance(candle_time, float) or isinstance(candle_time, int):
                candle_times.append(int(candle_time))
            else:
                candle_times.append(int(pd.to_datetime(candle_time).timestamp()))
        except Exception:
            candle_times.append(None)
    # Th·ª≠ c√°c offset ph·ªï bi·∫øn (gi·ªù): 0, +7, -7, +8, -8, +9, -9
    offsets = [0, 7, -7, 8, -8, 9, -9]
    best_offset = 0
    best_matched = 0
    offset_results = {}
    for offset in offsets:
        matched = 0
        for idx, row in trade_df.iterrows():
            entry_time = row['entry_time']
            try:
                if isinstance(entry_time, str) and entry_time.isdigit():
                    entry_ts = int(entry_time)
                elif isinstance(entry_time, float) or isinstance(entry_time, int):
                    entry_ts = int(entry_time)
                else:
                    entry_ts = int(pd.to_datetime(entry_time).timestamp())
                entry_ts = entry_ts - offset*3600  # Tr·ª´ offset gi·ªù
            except Exception:
                continue
            found = False
            for candle_ts in candle_times:
                if candle_ts is not None and abs(candle_ts - entry_ts) < 60*60:
                    found = True
                    break
            if found:
                matched += 1
        offset_results[offset] = matched
        if matched > best_matched:
            best_matched = matched
            best_offset = offset
    print('==== T·ª∞ ƒê·ªòNG D√í TIMEZONE/OFFSET ===')
    for offset in offsets:
        print(f'Offset {offset:+}h: matched {offset_results[offset]}/{len(trade_df)}')
    print(f'==> Offset kh·ªõp nhi·ªÅu nh·∫•t: {best_offset:+}h ({best_matched}/{len(trade_df)} trade)')
    if best_matched == 0:
        print('‚ùå Kh√¥ng kh·ªõp ƒë∆∞·ª£c trade n√†o v·ªõi candle! Ki·ªÉm tra l·∫°i symbol, timeframe, ho·∫∑c d·ªØ li·ªáu candle.')
    elif best_matched < len(trade_df):
        print('‚ö†Ô∏è M·ªôt s·ªë trade v·∫´n b·ªã thi·∫øu n·∫øn. C√≥ th·ªÉ d·ªØ li·ªáu candle b·ªã thi·∫øu ho·∫∑c l·ªách th√™m timezone.')
    else:
        print('‚úÖ ƒê√£ kh·ªõp ƒë·ªß n·∫øn cho to√†n b·ªô trade v·ªõi offset n√†y.')

if __name__ == '__main__':
    # ƒê·ªçc tradelist
    trade_df = load_tradelist(TRADELIST_FILE)
    if trade_df is None:
        exit(1)
    # ∆Øu ti√™n ƒë·ªçc candle t·ª´ DB n·∫øu c√≥, n·∫øu kh√¥ng th√¨ t·ª´ file CSV
    if os.path.exists(CANDLE_DB):
        print(f'ƒêang d√πng database: {CANDLE_DB} | symbol: {CANDLE_SYMBOL} | timeframe: {CANDLE_TIMEFRAME}')
        candle_df = load_candle_db(CANDLE_DB, CANDLE_SYMBOL, CANDLE_TIMEFRAME)
    elif os.path.exists(CANDLE_FILE):
        print(f'ƒêang d√πng file candle: {CANDLE_FILE}')
        candle_df = load_candle_csv(CANDLE_FILE)
    else:
        print('‚ùå Kh√¥ng t√¨m th·∫•y ngu·ªìn d·ªØ li·ªáu candle!')
        exit(1)
    if candle_df is None:
        exit(1)
    # Ki·ªÉm tra t·ª´ng trade
    check_trades_vs_candles(trade_df, candle_df)
