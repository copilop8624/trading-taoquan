diff --git a/scripts/render_sim_chart.py b/scripts/render_sim_chart.py
new file mode 100644
index 0000000..e69de29
--- /dev/null
+++ b/scripts/render_sim_chart.py
@@ -0,0 +1,92 @@
import json
from pathlib import Path
import matplotlib.pyplot as plt
from typing import Any, Dict

def render_sim_chart(data: Dict[str, Any], out_path: Path) -> Path:
	"""Render cumulative PnL chart from simulation data and save to out_path.

	Args:
		data: Parsed JSON result from /simulate
		out_path: Path to write PNG file

	Returns:
		Path to saved image
	"""
	cum = data.get('cumulative', [])
	preview = data.get('preview', []) or []
	labels = [p.get('date') or str(i) for i,p in enumerate(preview)]

	plt.figure(figsize=(8,4))
	plt.plot(cum, marker='o')
	plt.title('Simulated Cumulative PnL')
	if len(labels) > 0:
		plt.xticks(range(len(labels)), labels, rotation=30)
	plt.tight_layout()
	out_path.parent.mkdir(parents=True, exist_ok=True)
	plt.savefig(out_path)
	plt.close()
	return out_path


if __name__ == '__main__':
	res = Path('scripts') / 'simulate_result.json'
	assert res.exists(), 'simulate_result.json not found in scripts/'
	data = json.loads(res.read_text())
	out = Path('simulate_cumulative.png')
	saved = render_sim_chart(data, out)
	print('Saved', saved)

diff --git a/scripts/run_simulation_client.py b/scripts/run_simulation_client.py
index e69de29..e69de29 100644
--- a/scripts/run_simulation_client.py
+++ b/scripts/run_simulation_client.py
@@ -1,52 +1,85 @@
import json
import os
from pathlib import Path
from web_app import app

from scripts.render_sim_chart import render_sim_chart

ROOT = Path('.')
SAMPLE = ROOT / 'sample_trades_TEST.csv'
assert SAMPLE.exists(), 'sample CSV missing'

client = app.test_client()
with open(SAMPLE, 'rb') as f:
	rv = client.post('/upload_tradelist', data={
		'file': (f, SAMPLE.name),
		'symbol': 'TEST',
		'strategy': 'demo',
		'date_parse_mode': 'default',
		'drop_incomplete': 'on'
	}, content_type='multipart/form-data')
	print('upload status', rv.status_code)
	print(rv.get_json())

# now call simulate
payload = {
	'symbol': 'TEST',
	'strategy': 'demo',
	'tp_levels': [1,2,5],
	'sl': -2,
	'trailing_stop': 0,
	'break_even_trigger': 0,
	'break_even_sl': 0
}
rv = client.post('/simulate', json=payload)
print('simulate status', rv.status_code)
resp = rv.get_json()
print(json.dumps(resp, indent=2))

# save JSON result to repo root
out_json = ROOT / 'simulate_result.json'
out_json.write_text(json.dumps(resp, indent=2), encoding='utf-8')
print('Created', out_json)

# Render chart to repo root
out_png = ROOT / 'simulate_cumulative.png'
try:
	render_sim_chart(resp, out_png)
	print('Created', out_png)
except Exception as e:
	print('Chart render failed:', e)

# Create short text report
out_report = ROOT / 'simulate_report.txt'
with open(out_report, 'w', encoding='utf-8') as f:
	summary = resp.get('summary', {})
	f.write(f"total PnL: {summary.get('pnl_total')}\n")
	f.write(f"trade count: {summary.get('trade_count')}\n")
	f.write(f"winrate: {summary.get('winrate')}\n\n")
	f.write('Per-trade summary:\n')
	for d in resp.get('details', []):
		f.write(f"entryDt={d.get('entryDt')}, exitDt={d.get('exitDt')}, entryPrice={d.get('entryPrice')}, exitPrice={d.get('exitPrice')}, pnlPct={d.get('pnlPct')}, exitType={d.get('exitType')}\n")
print('Created', out_report)

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..e69de29
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,7 @@
 simulate_result.json
 simulate_cumulative.png
 simulate_report.txt
 __pycache__/
 .pytest_cache/
 .DS_Store

+import json
+import os
+from pathlib import Path
+from web_app import app
+
+from scripts.render_sim_chart import render_sim_chart
+
+ROOT = Path('.')
+SAMPLE = ROOT / 'sample_trades_TEST.csv'
+assert SAMPLE.exists(), 'sample CSV missing'
+
+client = app.test_client()
+with open(SAMPLE, 'rb') as f:
+    rv = client.post('/upload_tradelist', data={
+        'file': (f, SAMPLE.name),
+        'symbol': 'TEST',
+        'strategy': 'demo',
+        'date_parse_mode': 'default',
+        'drop_incomplete': 'on'
+    }, content_type='multipart/form-data')
+    print('upload status', rv.status_code)
+    print(rv.get_json())
+
+# now call simulate
+payload = {
+    'symbol': 'TEST',
+    'strategy': 'demo',
+    'tp_levels': [1,2,5],
+    'sl': -2,
+    'trailing_stop': 0,
+    'break_even_trigger': 0,
+    'break_even_sl': 0
+}
+rv = client.post('/simulate', json=payload)
+print('simulate status', rv.status_code)
+resp = rv.get_json()
+print(json.dumps(resp, indent=2))
+
+# save JSON result to repo root
+out_json = ROOT / 'simulate_result.json'
+out_json.write_text(json.dumps(resp, indent=2), encoding='utf-8')
+print('Created', out_json)
+
+# Render chart to repo root
+out_png = ROOT / 'simulate_cumulative.png'
+try:
+    render_sim_chart(resp, out_png)
+    print('Created', out_png)
+except Exception as e:
+    print('Chart render failed:', e)
+
+# Create short text report
+out_report = ROOT / 'simulate_report.txt'
+with open(out_report, 'w', encoding='utf-8') as f:
+    summary = resp.get('summary', {})
+    f.write(f"total PnL: {summary.get('pnl_total')}\n")
+    f.write(f"trade count: {summary.get('trade_count')}\n")
+    f.write(f"winrate: {summary.get('winrate')}\n\n")
+    f.write('Per-trade summary:\n')
+    for d in resp.get('details', []):
+        f.write(f"entryDt={d.get('entryDt')}, exitDt={d.get('exitDt')}, entryPrice={d.get('entryPrice')}, exitPrice={d.get('exitPrice')}, pnlPct={d.get('pnlPct')}, exitType={d.get('exitType')}\n")
+print('Created', out_report)
 
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..0000000
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,7 @@
+simulate_result.json
+simulate_cumulative.png
+simulate_report.txt
+__pycache__/
+.pytest_cache/
+.DS_Store
+
